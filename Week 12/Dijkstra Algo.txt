#include <iostream>
#include <queue>
#include <vector>
#include <climits>

using namespace std;

vector<int> dijkstra(vector<vector<int>>& adj_matrix, int start_node) {
    int num_nodes = adj_matrix.size();
    vector<int> distances(num_nodes, INT_MAX);
    distances[start_node] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(0, start_node));

    while (!pq.empty()) {
        int current_distance = pq.top().first;
        int current_node = pq.top().second;
        pq.pop();

        if (current_distance > distances[current_node]) {
            continue;
        }

        for (int neighbor = 0; neighbor < num_nodes; ++neighbor) {
            int weight = adj_matrix[current_node][neighbor];

            if (weight > 0) {
                int distance = current_distance + weight;

                if (distance < distances[neighbor]) {
                    distances[neighbor] = distance;
                    pq.push(make_pair(distance, neighbor));
                }
            }
        }
    }

    return distances;
}

int main() {
    vector<vector<int>> adjacency_matrix = {
        {0, 10, 0, 0, 15, 5},
        {10, 0, 10, 30, 0, 0},
        {0, 10, 0, 12, 5, 0},
        {0, 30, 12, 0, 0, 20},
        {15, 0, 5, 0, 0, 0},
        {5, 0, 0, 20, 0, 0}
    };

    int start_node = 0;
    vector<int> shortest_distances = dijkstra(adjacency_matrix, start_node);

    cout << "Shortest distances from start city " << start_node << " to all other cities:\n";
    for (int node = 0; node < shortest_distances.size(); ++node) {
        if(node==start_node){
            continue;
        }
        cout << node << ": " << shortest_distances[node] << "\n";
    }

    return 0;
}
